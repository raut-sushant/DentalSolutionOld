/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ekdant.dentalsolution.utilities;

import com.ekdant.dentalsolution.dao.ActivationDao;
import com.ekdant.dentalsolution.dao.TokensDao;
import com.ekdant.dentalsolution.domain.ActivationBean;
import java.io.BufferedReader;
import java.io.FileReader;
import java.text.DateFormat;
import java.text.Normalizer;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;

/**
 *
 * @author Sushant Raut
 */
public class Activation extends javax.swing.JFrame {
    TokensDao tokensDao;
    ActivationDao activationDao;
    DateFormat displayDateFormat = new SimpleDateFormat("dd-MMM-yyyy");
    DateFormat databaseDateFormat = new SimpleDateFormat("yyyy-MM-dd");

    /**
     * Creates new form activation
     */
    public Activation() {
        tokensDao = new TokensDao();
        activationDao = new ActivationDao();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uploadFileLbl = new javax.swing.JLabel();
        activationFileUploaderFC = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        uploadFileLbl.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        uploadFileLbl.setForeground(new java.awt.Color(51, 51, 255));
        uploadFileLbl.setText("Please upload activation file to activate software.");

        activationFileUploaderFC.setCurrentDirectory(new java.io.File("C:\\"));
            activationFileUploaderFC.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    activationFileUploaderFCActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 602, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uploadFileLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(activationFileUploaderFC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap()))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 462, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(uploadFileLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(activationFileUploaderFC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void activationFileUploaderFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activationFileUploaderFCActionPerformed
        String line = null;
        boolean validActivation = false;
        ActivationBean activation = new ActivationBean();
        try{
            FileReader activationFileReader = new FileReader(activationFileUploaderFC.getSelectedFile());
            BufferedReader bufferedReader = new BufferedReader(activationFileReader);
            int lineCount = 0;
            while((line = bufferedReader.readLine()) != null){
                if(lineCount == 0){
                    if(validActivationFile(AES.decrypt(Utils.getByteArray(line)).trim())){
                        activation.setActivationFileKey(AES.decrypt(Utils.getByteArray(line)).trim());
                    }else{
                        JOptionPane.showMessageDialog(null,"Activation file is already used. Please provide correct activation file","Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    Date startDate = null;
                    try{
                        startDate = displayDateFormat.parse(tokensDao.fetchCurrentExpirationDate());
                    }catch(Exception e){System.out.println(e.getMessage());}
                    activation.setStartDate(startDate);
                }
                
                if(lineCount == 2){
                    if(validToken(line)){
                        validActivation = true;
                    }else{
                        JOptionPane.showMessageDialog(null,"Please provide correct activation file","Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                }
                
                if(lineCount == 4){
                    int activationDays = 0;
                    try{
                        activationDays = Integer.parseInt(AES.decrypt(Utils.getByteArray(line)).trim());
                    }catch(Exception e){System.out.println(e.getMessage());}
                    activation.setActivationDays(activationDays);
                    line = updateActivationDate(line);
                }
                
                if(lineCount != 0){                
                    tokensDao.setToken("K" + (lineCount), line);
                }
                lineCount++;
            }
        } catch(Exception e){ }
        if(validActivation){
            Date currentExpirationDate = null;
            try{
                currentExpirationDate = displayDateFormat.parse(tokensDao.fetchCurrentExpirationDate());
            }catch(Exception e){System.out.println(e.getMessage());}
            activation.setEndDate(currentExpirationDate);
            activationDao.addActivation(activation);
            JOptionPane.showMessageDialog(null,"Activation successful","Info", JOptionPane.INFORMATION_MESSAGE);
        }
        this.dispose();
    }//GEN-LAST:event_activationFileUploaderFCActionPerformed

    private boolean validActivationFile(String fileActivationKey){
        return !activationDao.activationPresent(fileActivationKey);
    }
    
    private String updateActivationDate(String str){
        int activationDays = 0;
        String currentActivationDate = tokensDao.getTokenValue("K4");
        try {
            activationDays = Integer.parseInt(AES.decrypt(Utils.getByteArray(str)).trim());
        } catch (Exception ex) {System.out.println(ex.getMessage());}
        try {
            Date today = new Date();
            java.util.Date activationDate = null;
            try{
                activationDate = displayDateFormat.parse(tokensDao.fetchCurrentExpirationDate());
            }catch(Exception e){
                activationDate = new Date();
            }
            Calendar activationExpirationCal = new GregorianCalendar();
            if(today.before(activationDate)){
                activationExpirationCal.setTime(activationDate);
            }            
            activationExpirationCal.add(Calendar.DATE, activationDays); 
            currentActivationDate = AES.getEncriptionString(Utils.getValidString(displayDateFormat.format(new Date(activationExpirationCal.getTimeInMillis()))));
        } catch (Exception ex) {System.out.println(ex.getMessage());}
        
        return currentActivationDate;
    }
    
    private boolean validToken(String token){
        boolean success = false;
        try{
            if(Utils.getMotherboardSN().equals(AES.decrypt(Utils.getByteArray(token)).trim())){
                success = true;
            }
        }catch(Exception e){System.out.println(e.getMessage());}
        return success;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser activationFileUploaderFC;
    private javax.swing.JLabel uploadFileLbl;
    // End of variables declaration//GEN-END:variables
}
